" --
" -- configuration for vsvim (not visual studio code)
"
" to reload the config use ':source c:\users\<user>\.vsvimrc'
"
" -- NOTES -- 
" vim interprets Ctrl+Alt as AltGr
" vim interprets Ctrl-I is identical to TAB
" vim interprets Ctrl-[ is identical to ESC
"
"

" get current line + relative numbers better than 'set relativenumber'
set number relativenumber 

" Sets system synchronized clipboard register 
set clipboard=unnamed

" The number of screen lines to keep above and below the cursor.
set scrolloff=11

" set timeoutlen=900

" -- search --
"DONT SET 'set hlsearch' since we have to clear highlight again
"nnoremap <Esc> :nohl<Cr><Esc>
"nnoremap <Cr> :nohl<Cr><Cr>
"nnoremap i :nohl<Cr>i

"enable incremental search 
set incsearch
"defaults to ignore case search
set ignorecase 
"search will be case sensitive if search pattern contains upper case character
set smartcase

" Map leader to space.  Unbinds the Space key as it's used as the leader key
nnoremap <SPACE> <Nop>
let mapleader=" "


" -- ESC --
inoremap <A-o> <Esc>
vnoremap <A-o> <Esc>
" save if file is changed and go to normal mode
inoremap <C-s> <Esc>:update<CR>
nnoremap <C-s> <Esc>:update<CR>





"
" -- motions -- 
"in vim already: b = ()
"in vim already: B = {}
" (c)hange (a)round (q)uote 
nnoremap cb "acib
vnoremap cb cib
nnoremap cB "aciB
nnoremap cq "aci"
nnoremap ciq "aci"
nnoremap caq "aca"
nnoremap dq "adi"
vnoremap dq di"
nnoremap daq "ada"
nnoremap yaq ya"
nnoremap yiq yi"

" (c)hange (a)round (p)ling - we copy to a-register rather than rely on c/d being redefined to not alter the content
nnoremap cip "aci'
nnoremap cap "aca'
nnoremap dip "adi'
nnoremap dap "ada'
nnoremap yip yi'

" (d)elete (i)nside (a)rray - we copy to a-register rather than rely on c/d being redefined to not alter the content
nnoremap ca "aci[
nnoremap cia "aci[
nnoremap caa "aca[
nnoremap dia "adi[
nnoremap daa "ada[
nnoremap yaa ya[
nnoremap yia yi[


"
" -- delete and change -- 
" C/D/x works as cut in visual-mode  (requires no mapping)
" C/D/X works as delete/cut-to-reg-a in normal-mode
nnoremap x "_x
nnoremap X "_X
nnoremap c "ac
nnoremap C "aC
nnoremap d "ad
nnoremap D "aD
nnoremap <leader>p "ap
nnoremap <leader>P "aP



"
" -- replace motion --
" -- commands can be simplified we dont need   "a   but for now we keep it 
" move r to R
nnoremap R r
" replace - works with motions e.g. 'r3w'
"nnoremap r dp
"but it does not support .-repeat

"nnoremap rw  :let @r=':normal! nnoremap . @r<CR>\"adwp'<CR>@r<CR>
"nnoremap rW  :let @r='normal! nnoremap . @r<CR>dWp'<CR>@r
"nnoremap r2w  :let @r='normal! nnoremap . @r<CR>d2wp'<CR>@r

" macro free approach
"nnoremap r :normal! dp<CR>

" (r)eplace (w)ord - deletes to register 'a' and paste - we use 'diw' because 1 word delete should not include white space
nnoremap rw "adiwPw
nnoremap rW "adiWPw
" visual mode 'w' and normal mode 'w' is not the same! and
" using quote for a-register screws up
" i see.. sW is also wrongly defined
"nnoremap sw  :let @r='normal! nnoremap . @r<CR>"adwp'<CR>@r<Esc>
"nnoremap sW  :let @r='normal! nnoremap . @r<CR>vWP'<CR>@r
"nnoremap siw  :let @r='normal! nnoremap . @r<CR>viwP'<CR>@r
"nnoremap siW  :let @r='normal! nnoremap . @r<CR>viWP'<CR>@r

" we use 'daw' otherwise space between words counts as a word, e.g. "aa bb " di3w, but only da2w
nnoremap r2w "a2dawP
nnoremap r3w "a3dawP
nnoremap r4w "a4dawP
" line
" change line (cc) and delete line (dd) are unchanged
" (r)eplace (j) for down
nnoremap rj "addPj
nnoremap rk k"addPj
nnoremap r2j "a2ddPj
nnoremap r3j "a3ddPj


"delete line -- replace 'go to previous line'
"nnoremap - dd

" -- search forward easy using non-us keyboard - also makes , and ; usable for other mappings
" Lowercase letters
nnoremap -a /a<CR>
nnoremap -b /b<CR>
nnoremap -c /c<CR>
nnoremap -d /d<CR>
nnoremap -e /e<CR>
nnoremap -f /f<CR>
nnoremap -g /g<CR>
nnoremap -h /h<CR>
nnoremap -i /i<CR>
nnoremap -j /j<CR>
nnoremap -k /k<CR>
nnoremap -l /l<CR>
nnoremap -m /m<CR>
nnoremap -n /n<CR>
nnoremap -o /o<CR>
nnoremap -p /p<CR>
nnoremap -q /q<CR>
nnoremap -r /r<CR>
nnoremap -s /s<CR>
nnoremap -t /t<CR>
nnoremap -u /u<CR>
nnoremap -v /v<CR>
nnoremap -w /w<CR>
nnoremap -x /x<CR>
nnoremap -y /y<CR>
nnoremap -z /z<CR>
" Uppercase letters
nnoremap -A /A<CR>
nnoremap -B /B<CR>
nnoremap -C /C<CR>
nnoremap -D /D<CR>
nnoremap -E /E<CR>
nnoremap -F /F<CR>
nnoremap -G /G<CR>
nnoremap -H /H<CR>
nnoremap -I /I<CR>
nnoremap -J /J<CR>
nnoremap -K /K<CR>
nnoremap -L /L<CR>
nnoremap -M /M<CR>
nnoremap -N /N<CR>
nnoremap -O /O<CR>
nnoremap -P /P<CR>
nnoremap -Q /Q<CR>
nnoremap -R /R<CR>
nnoremap -S /S<CR>
nnoremap -T /T<CR>
nnoremap -U /U<CR>
nnoremap -V /V<CR>
nnoremap -W /W<CR>
nnoremap -X /X<CR>
nnoremap -Y /Y<CR>
nnoremap -Z /Z<CR>
" Digits
nnoremap -0 /0<CR>
nnoremap -1 /1<CR>
nnoremap -2 /2<CR>
nnoremap -3 /3<CR>
nnoremap -4 /4<CR>
nnoremap -5 /5<CR>
nnoremap -6 /6<CR>
nnoremap -7 /7<CR>
nnoremap -8 /8<CR>
nnoremap -9 /9<CR>
" Common symbols
nnoremap -- /-<CR>
nnoremap -_ /_<CR>
nnoremap -= /=<CR>
nnoremap -+ /+<CR>
nnoremap -[ /[<CR>
nnoremap -] /]<CR>
nnoremap -{ /{<CR>
nnoremap -} /}<CR>
nnoremap -\( /\(<CR>
nnoremap -\) /\)<CR>
nnoremap -\ /\\<CR>
nnoremap -| /|<CR>
nnoremap -; /;<CR>
nnoremap -: /:<CR>
nnoremap -, /,<CR>
nnoremap -. /\.<CR>
nnoremap -' /'<CR>
nnoremap -" /"<CR>
nnoremap -` /`<CR>
nnoremap -~ /~<CR>




" -- visual 
" -- selection -- 
" multi-line-cursor select with ctrl+alt+cursor - works out of the box
" Amazing VS functionality
inoremap <C-A-I> <Esc>:vsc Edit.ExpandSelection<CR>
nnoremap <C-A-I> :vsc Edit.ExpandSelection<CR>
vnoremap <C-A-I> :vsc Edit.ExpandSelection<CR>
vnoremap i :vsc Edit.ExpandSelection<CR>
vnoremap I :vsc Edit.ContractSelection<CR>




" 
" -- misc --
nnoremap u :vsc Edit.Undo<cr>
nnoremap U :vsc Edit.Redo<cr> 

" make the cursor does not jump back to where you started the selection.
vnoremap y ygv<esc>





" 
" -- HJKL navigation --
" replace H = 'go to top of screen' 
" it is tempting to remap H to BOL - but we have 'A' or 'C', 'D', '_' for that
nnoremap H :vsc Edit.FindAllReference<CR>

" replace go to bottom of screen
nnoremap L :vsc Edit.GoToDefinition<CR>
nnoremap gd :vsc Edit.GoToDefinition<CR>
" join lines
inoremap <C-j> <Esc>Ji
inoremap <C-S-j> <Esc>kJi

" up/down and re-center (<c-d> is too much scrolling)
nnoremap J 19jzz
vnoremap J 19jzz
nnoremap K 19kzz
vnoremap K 19kzz

" down next block and re-center
nnoremap m }zz
vnoremap m }zz

" we navigate more than marking (m)
nnoremap M m
nnoremap M m

" center search next
" confusing since first find does not move
"nnoremap n nzz
"nnoremap N Nzz




nnoremap <leader>q :vsc File.Close<CR>
nnoremap <leader>w :vsc File.Exit<CR>

"##  nnoremap ge :vsc Resharper.Resharper_GotoNextErrorInSolution<CR>
"##  nnoremap gh :vsc Resharper.Resharper_GotoNextHighlight<CR>
"##  nnoremap gm :vsc Resharper.Resharper_GotoFileMember<CR>
"##  nnoremap gu :vsc Resharper.Resharper_UnitTest_RunSolution<CR>
"##  nnoremap gr :vsc Resharper.Resharper_Resharper_UnitTest_RunContext<CR>
"##  nnoremap g2 :vsc Resharper.Resharper_Resharper_UnitTest_DebugContext<CR>
"##  nnoremap gU :vsc Resharper.Resharper_ShowUnitTestSessions<CR><C-F4>


"nnoremap <leader>ge :vsc Resharper.Resharper_GotoNextErrorInSolution<CR>

" maybe delete this? works on project error not search
nnoremap <leader>e :vsc View.NextError<CR>
nnoremap <leader>i :vsc View.NextError<CR>i
" works for search and errors - mimics VIM's n for next result
nnoremap <leader>n :vsc Edit.GoToNextLocation<CR>
nnoremap <leader>N :vsc Edit.GoToPrevLocation<CR>

" (b) build
nnoremap <leader>b :vsc Build.BuildSolution<CR>

" (r)un
nnoremap <leader>r :vsc Debug.Start<CR>

" -- (c)ode operations
nnoremap <leader>cc :vsc Edit.CommentSelection<CR>
nnoremap <leader>cu :vsc Edit.UncommentSelection<CR>
nnoremap <leader>cr :vsc Refactor.Rename<CR>
nnoremap <leader>cb :vsc Build.RebuildSolution<CR>
nnoremap <leader>cf :vsc Edit.Formatdocument<CR>
"(c)code (d)ollar - add $ infront of string
nnoremap <leader>cd mdF"i$<Esc>`dl

" remap vim command format section to vs
nnoremap gq :vsc Edit.Formatdocument<CR>


nnoremap <leader>t :vsc Edit.NavigateTo<cr>
nnoremap <leader>m :vsc Edit.NextMethod<cr>
nnoremap <leader>M :vsc Edit.PreviousMethod<cr>

" (g)o operations
nnoremap <leader>gpe :vsc View.PreviousError<CR>
nnoremap <leader>gd :vsc Edit.GoToDefinition<CR>
nnoremap <leader>gc :vsc Edit.GoToDeclaration<CR>
nnoremap <leader>gi :vsc Edit.GoToImplementation<CR>
nnoremap <leader>gr :vsc Edit.FindAllReferences<CR>
nnoremap <leader>gle :vsc Edit.GotoLastEditLocation<CR>
nnoremap <leader>gtb :vsc Edit.GotoBraceExtend<CR>
nnoremap <leader>gtsb :vsc ResourceExplorer.GoToSearchBar<CR>
noremap <leader>gq :vsc Window.ActivateQuickLaunch<CR>

nnoremap <leader>db :vsc Debug.EnableBreakpoint<CR>


" more logical to use [], but this is easier to reach and on NORDIC layout ] is a deadkey

" this works >>>> nnoremap <leader>P :vsc Edit.GoToPreviousIssueInFile<CR>
" this works >>>> nnoremap <leader>p :vsc Edit.GoToNextIssueInFile<CR>
nnoremap <leader>p :vsc Edit.Resharper_GotoNextErrorInSolution<CR>


"moving tab looses focus.. needs a better way
nnoremap <leader>j :vsc Window.NextTab<CR>
nnoremap <leader>k :vsc Window.PreviousTab<CR>



" (w)indow (e)xplore files
nnoremap <leader>we :vsc View.TrackActivityInSolutionExplorer<CR>:vsc View.SolutionExplorer<CR>
" `<leader> + w(indow) + p(in)` - Toggle the pin status of the document 
nnoremap <leader>wp :vsc Window.PinTab<CR>
" `<leader> + (w)indows + (c)lose + (a)ll` - Close all unpinned documents 
nnoremap <leader>wca :vsc Window.CloseAllButPinned<CR>

" -- normal mode editing --
nnoremap <leader>o myo<Esc>`y
nnoremap <leader>O myO<Esc>`y
nnoremap <leader>; A;<Esc>

nnoremap <CR> i<CR><Esc>
nnoremap <BS> X

" do not work in vsvim since if you press o and quickly ctrl-v then it paste before inserting a new line
" also it makes single o slow as it waits for more input
"nnoremap oo myo<Esc>`y
"nnoremap OO myO<Esc>`y

" join lines
nnoremap <leader>J J
vnoremap <leader>J J


nnoremap confe :e C:\Users\t01kagr\.vsvimrc<CR>
nnoremap confr :source C:\Users\t01kagr\.vsvimrc<CR>





" -- number pad --
" Windows interprets Ctrl+Alt as AltGr
nnoremap <C-A-u> 7
nnoremap <C-A-i> 8
nnoremap <C-A-o> 9
nnoremap <C-A-j> 4
nnoremap <C-A-k> 5
nnoremap <C-A-l> 6
nnoremap <C-A-æ> 0
nnoremap <C-A-m> 1
nnoremap <C-A-,> 2
nnoremap <C-A-.> 3





"
" test later
" test later
" test later
" test later
" test later
"
"
"## ideas
"## 
"## backward search from EOL
"## &{int} -> ${int}h
"## ¤fo		-> $?fo



" -- movement --
" go to end of previous word
"nnoremap W ge
"vnoremap W ge

" goto first char.. nice idea but nejer use it
"vnoremap H ^
" goto EOL
"vnoremap L g_


" -- code insert -- 
" pausing this and using US format instead - if reintroduce, reduce timeout for waiting as editing feels slow
"inoremap jk {<Esc>li
"inoremap jl [<Esc>li
"inoremap jæ (<Esc>li
"inoremap æa <Esc>A;
"inoremap øa <Esc>/[)}"'\]>]<CR>:nohl<CR>a<space>

" not sure what we navigate
"nnoremap <leader>i :vsc View.NavigateForward<CR>
"nnoremap <leader>o :vsc View.NavigateBackward<CR>



" not working
" alternative to vim ctr-o that goes to normal mode for 1 command
"inoremap <A-h> <Esc>hi
"inoremap <A-j> <Esc>ji
"inoremap <A-k> <Esc>ki
"inoremap <A-l> <Esc>li
	
" doesnt work in vsvim 
" inoremap <A-v> <Esc>v
" works but we want another approach 
" inoremap <A-a> <Esc>A


" bracket ideas
"" (g)o (s)tart (b)racket - goto start ( and insert
"nnoremap gsb /(<CR>a
"" go brace first - gives delay.. should we use it?"
"nnoremap gsb /(<CR>a
"nnoremap gsp /(\|{\|[\|"\|'<CR>
"nnoremap gsB /{<CR>a
"nnoremap gsa /[<CR>a
"
"" (g)o (b)racket - goto end ) and insert
"nnoremap gb /)<CR>i
"vnoremap gb /)<CR>
"nnoremap ga /]<CR>i
"vnoremap ga /]<CR>
"nnoremap gB /}<CR>i
"vnoremap gB /}<CR>
"nnoremap gq /"<CR>
"vnoremap gq /"<CR>
"nnoremap gb /)<CR>i
"nnoremap gp /)\|}\|]\|"\|'<CR>


""match idea
"nnoremap dm d%
"nnoremap cm c%
"inoremap ,, <esc>:vsc Window.PreviousTab<CR>
"nnoremap ,, <esc>:vsc Window.PreviousTab<CR>

